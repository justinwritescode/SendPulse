/*
 * Telegram service API
 *
 * Using the API for Telegram chatbots, you can integrate your system with SendPulse’s chatbots service and get detailed information about your account, bots, subscribers, variables, flows, and chats. You can also create campaigns, launch flows, assign and remove variables and tags.               On the right, there is a button for authorizing requests made on this page. Click “Authorize,” then insert the ID and Secret from your account.               To perform a request directly from the page, click the \"Try it out\" button within each method block. Then fill in input fields if any (for URL parameters, the description is right below the URL request; for body parameters, the description is under the “Scheme” button to the right of the example), and click “Run.” You'll find the server response and description of received parameters below.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: justin@justinwritescode.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using SendPulse.Api.Client;
using SendPulse.Api.Client.Abstractions;
using SendPulse.Api.Models;

namespace SendPulse.Api.Abstractions;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IFlowsApi : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// Get a list of flows
    /// </summary>
    /// <remarks>
    /// Returns a list of created flows for the selected bot and information for each: flow id, bot id, status, name, id and name of the trigger that launches it, and creation date
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>InlineResponse2003</returns>
    GetFlowsByBotResponse GetFlowsByBot(string botId);

    /// <summary>
    /// Get a list of flows
    /// </summary>
    /// <remarks>
    /// Returns a list of created flows for the selected bot and information for each: flow id, bot id, status, name, id and name of the trigger that launches it, and creation date
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>ApiResponse of InlineResponse2003</returns>
    ApiResponse<GetFlowsByBotResponse> FlowsGetWithHttpInfo(string botId);

    /// <summary>
    /// Run a flow by trigger keywords
    /// </summary>
    /// <remarks>
    /// Launches a flow with the trigger keyword for the selected contact
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    SuccessResponse FlowsRunByTriggerPost(FlowsRunByTriggerBody body);

    /// <summary>
    /// Run a flow by trigger keywords
    /// </summary>
    /// <remarks>
    /// Launches a flow with the trigger keyword for the selected contact
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    ApiResponse<SuccessResponse> FlowsRunByTriggerPostWithHttpInfo(FlowsRunByTriggerBody body);

    /// <summary>
    /// Run a flow by its ID
    /// </summary>
    /// <remarks>
    /// Launches the selected flow for the selected contact.
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    SuccessResponse FlowsRunPost(FlowsRunBody body);

    /// <summary>
    /// Run a flow by its ID
    /// </summary>
    /// <remarks>
    /// Launches the selected flow for the selected contact.
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    ApiResponse<SuccessResponse> FlowsRunPostWithHttpInfo(FlowsRunBody body);
    #endregion Synchronous Operations
    #region Asynchronous Operations
    /// <summary>
    /// Get a list of flows
    /// </summary>
    /// <remarks>
    /// Returns a list of created flows for the selected bot and information for each: flow id, bot id, status, name, id and name of the trigger that launches it, and creation date
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of InlineResponse2003</returns>
    System.Threading.Tasks.Task<GetFlowsByBotResponse> FlowsGetAsync(string botId);

    /// <summary>
    /// Get a list of flows
    /// </summary>
    /// <remarks>
    /// Returns a list of created flows for the selected bot and information for each: flow id, bot id, status, name, id and name of the trigger that launches it, and creation date
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetFlowsByBotResponse>> FlowsGetAsyncWithHttpInfo(
        string botId
    );

    /// <summary>
    /// Run a flow by trigger keywords
    /// </summary>
    /// <remarks>
    /// Launches a flow with the trigger keyword for the selected contact
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    System.Threading.Tasks.Task<SuccessResponse> FlowsRunByTriggerPostAsync(
        FlowsRunByTriggerBody body
    );

    /// <summary>
    /// Run a flow by trigger keywords
    /// </summary>
    /// <remarks>
    /// Launches a flow with the trigger keyword for the selected contact
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > FlowsRunByTriggerPostAsyncWithHttpInfo(FlowsRunByTriggerBody body);

    /// <summary>
    /// Run a flow by its ID
    /// </summary>
    /// <remarks>
    /// Launches the selected flow for the selected contact.
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    System.Threading.Tasks.Task<SuccessResponse> FlowsRunPostAsync(FlowsRunBody body);

    /// <summary>
    /// Run a flow by its ID
    /// </summary>
    /// <remarks>
    /// Launches the selected flow for the selected contact.
    /// </remarks>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> FlowsRunPostAsyncWithHttpInfo(
        FlowsRunBody body
    );
    #endregion Asynchronous Operations
}
