/*
 * Telegram service API
 *
 * Using the API for Telegram chatbots, you can integrate your system with SendPulse’s chatbots service and get detailed information about your account, bots, subscribers, variables, flows, and chats. You can also create campaigns, launch flows, assign and remove variables and tags.               On the right, there is a button for authorizing requests made on this page. Click “Authorize,” then insert the ID and Secret from your account.               To perform a request directly from the page, click the \"Try it out\" button within each method block. Then fill in input fields if any (for URL parameters, the description is right below the URL request; for body parameters, the description is under the “Scheme” button to the right of the example), and click “Run.” You'll find the server response and description of received parameters below.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: justin@justinwritescode.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SendPulse.Api.Client.SwaggerDateConverter;

namespace SendPulse.Api.Models
{
    /// <summary>
    /// Variable
    /// </summary>
    [DataContract]
    public partial class Variable : IEquatable<Variable>, IValidatableObject
    {
        /// <summary>
        ///                      * &#x60;1&#x60; - contact variable                      * &#x60;2&#x60; - bot variable
        /// </summary>
        /// <value>                     * &#x60;1&#x60; - contact variable                      * &#x60;2&#x60; - bot variable                  </value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        ///                  this type of variable can have the following values:                      * &#x60;1&#x60; - string                      * &#x60;2&#x60; - number                      * &#x60;3&#x60; - date                      * &#x60;4&#x60; - boolean                      * &#x60;5&#x60; - phone                      * &#x60;6&#x60; - email                      * &#x60;7&#x60; - url
        /// </summary>
        /// <value>                 this type of variable can have the following values:                      * &#x60;1&#x60; - string                      * &#x60;2&#x60; - number                      * &#x60;3&#x60; - date                      * &#x60;4&#x60; - boolean                      * &#x60;5&#x60; - phone                      * &#x60;6&#x60; - email                      * &#x60;7&#x60; - url                  </value>
        [DataMember(Name = "value_type", EmitDefaultValue = true)]
        public VariableDataTypeEnum? ValueType { get; set; }

        // /// <summary>
        // ///                      * &#x60;1&#x60; - active                      * &#x60;2&#x60; - trashed
        // /// </summary>
        // /// <value>                     * &#x60;1&#x60; - active                      * &#x60;2&#x60; - trashed                  </value>
        // [JsonConverter(typeof(StringEnumConverter))]
        // public enum StatusEnum
        // {
        //     /// <summary>
        //     /// Enum NUMBER_1 for value: 1
        //     /// </summary>
        //     [EnumMember(Value = "1")]
        //     Active = 1,
        //     /// <summary>
        //     /// Enum NUMBER_2 for value: 2
        //     /// </summary>
        //     [EnumMember(Value = "2")]
        //     Trashed = 2
        // }
        /// <summary>
        ///                      * &#x60;1&#x60; - active                      * &#x60;2&#x60; - trashed
        /// </summary>
        /// <value>                     * &#x60;1&#x60; - active                      * &#x60;2&#x60; - trashed                  </value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Variable" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="botId">botId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="type">                     * &#x60;1&#x60; - contact variable                      * &#x60;2&#x60; - bot variable                  .</param>
        /// <param name="valueType">                 this type of variable can have the following values:                      * &#x60;1&#x60; - string                      * &#x60;2&#x60; - number                      * &#x60;3&#x60; - date                      * &#x60;4&#x60; - boolean                      * &#x60;5&#x60; - phone                      * &#x60;6&#x60; - email                      * &#x60;7&#x60; - url                  .</param>
        /// <param name="status">                     * &#x60;1&#x60; - active                      * &#x60;2&#x60; - trashed                  .</param>
        /// <param name="createdAt">createdAt.</param>
        public Variable(
            string id = default(string),
            string botId = default(string),
            string name = default(string),
            string description = default(string),
            TypeEnum? type = default(TypeEnum?),
            VariableDataTypeEnum? valueType = default(VariableDataTypeEnum?),
            StatusEnum? status = default(StatusEnum?),
            string createdAt = default(string)
        )
        {
            this.Id = id;
            this.BotId = botId;
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.ValueType = valueType;
            this.Status = status;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BotId
        /// </summary>
        [DataMember(Name = "bot_id", EmitDefaultValue = true)]
        public string BotId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Variable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BotId: ").Append(BotId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValueType: ").Append(ValueType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Variable);
        }

        /// <summary>
        /// Returns true if Variable instances are equal
        /// </summary>
        /// <param name="input">Instance of Variable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Variable input)
        {
            if (input == null)
                return false;

            return (this.Id == input.Id || (this.Id != null && this.Id.Equals(input.Id)))
                && (
                    this.BotId == input.BotId
                    || (this.BotId != null && this.BotId.Equals(input.BotId))
                )
                && (this.Name == input.Name || (this.Name != null && this.Name.Equals(input.Name)))
                && (
                    this.Description == input.Description
                    || (this.Description != null && this.Description.Equals(input.Description))
                )
                && (this.Type == input.Type || (this.Type != null && this.Type.Equals(input.Type)))
                && (
                    this.ValueType == input.ValueType
                    || (this.ValueType != null && this.ValueType.Equals(input.ValueType))
                )
                && (
                    this.Status == input.Status
                    || (this.Status != null && this.Status.Equals(input.Status))
                )
                && (
                    this.CreatedAt == input.CreatedAt
                    || (this.CreatedAt != null && this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BotId != null)
                    hashCode = hashCode * 59 + this.BotId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ValueType != null)
                    hashCode = hashCode * 59 + this.ValueType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
