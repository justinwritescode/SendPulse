/* 
 * Telegram service API
 *
 * Using the API for Telegram chatbots, you can integrate your system with SendPulse’s chatbots service and get detailed information about your account, bots, subscribers, variables, flows, and chats. You can also create campaigns, launch flows, assign and remove variables and tags.               On the right, there is a button for authorizing requests made on this page. Click “Authorize,” then insert the ID and Secret from your account.               To perform a request directly from the page, click the \"Try it out\" button within each method block. Then fill in input fields if any (for URL parameters, the description is right below the URL request; for body parameters, the description is under the “Scheme” button to the right of the example), and click “Run.” You'll find the server response and description of received parameters below.         
 *
 * OpenAPI spec version: 1.0.0
 * Contact: justin@justinwritescode.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SendPulse.Api.Client.SwaggerDateConverter;

namespace SendPulse.Api.Model
{
    /// <summary>
    /// CampaignsSendBody
    /// </summary>
    [DataContract]
        internal partial class CampaignsSendBody :  IEquatable<CampaignsSendBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsSendBody" /> class.
        /// </summary>
        /// <param name="title">Campaign title (required).</param>
        /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact. (required).</param>
        /// <param name="sendAt">Specify the date and time in the format Y-m-d H:i if you need to schedule the campaign, if you do not specify this parameter, the campaign will be sent immediately.</param>
        /// <param name="messages">Message to send, specifying the type and content of the campaign (required).</param>
        public CampaignsSendBody(string title = default(string), string botId = default(string), string sendAt = default(string), Collection<CampaignssendMessages> messages = default(Collection<CampaignssendMessages>))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for CampaignsSendBody and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "botId" is required (not null)
            if (botId == null)
            {
                throw new InvalidDataException("botId is a required property for CampaignsSendBody and cannot be null");
            }
            else
            {
                this.BotId = botId;
            }
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new InvalidDataException("messages is a required property for CampaignsSendBody and cannot be null");
            }
            else
            {
                this.Messages = messages;
            }
            this.SendAt = sendAt;
        }
        
        /// <summary>
        /// Campaign title
        /// </summary>
        /// <value>Campaign title</value>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.
        /// </summary>
        /// <value>Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</value>
        [DataMember(Name="bot_id", EmitDefaultValue=true)]
        public string BotId { get; set; }

        /// <summary>
        /// Specify the date and time in the format Y-m-d H:i if you need to schedule the campaign, if you do not specify this parameter, the campaign will be sent immediately
        /// </summary>
        /// <value>Specify the date and time in the format Y-m-d H:i if you need to schedule the campaign, if you do not specify this parameter, the campaign will be sent immediately</value>
        [DataMember(Name="send_at", EmitDefaultValue=true)]
        public string SendAt { get; set; }

        /// <summary>
        /// Message to send, specifying the type and content of the campaign
        /// </summary>
        /// <value>Message to send, specifying the type and content of the campaign</value>
        [DataMember(Name="messages", EmitDefaultValue=true)]
        public Collection<CampaignssendMessages> Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignsSendBody {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BotId: ").Append(BotId).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignsSendBody);
        }

        /// <summary>
        /// Returns true if CampaignsSendBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignsSendBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignsSendBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.BotId == input.BotId ||
                    (this.BotId != null &&
                    this.BotId.Equals(input.BotId))
                ) && 
                (
                    this.SendAt == input.SendAt ||
                    (this.SendAt != null &&
                    this.SendAt.Equals(input.SendAt))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.BotId != null)
                    hashCode = hashCode * 59 + this.BotId.GetHashCode();
                if (this.SendAt != null)
                    hashCode = hashCode * 59 + this.SendAt.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
