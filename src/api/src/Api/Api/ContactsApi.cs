/*
 * ContactsApi.cs
 *
 *   Created: 2022-11-27-04:23:24
 *   Modified: 2022-12-19-11:00:49
 *
 *   This code allows access to the SendPulse Telegram chatbot API
 *
 *   Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 *   Author: Justin Chase <justin@justinwritescode.com>
 *
 *   Copyright © 2022 Justin Chase, All Rights Reserved
 *      License: MIT (https://opensource.org/licenses/MIT)
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SendPulse.Api.Client;
using SendPulse.Api.Models;

namespace SendPulse.Api;
using Abstractions;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ContactsApi : IContactsApi
{
    private SendPulse.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="ContactsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public ContactsApi(string basePath)
    {
        this.Configuration = new SendPulse.Api.Client.Configuration { BasePath = basePath };

        ExceptionFactory = SendPulse.Api.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ContactsApi"/> class
    /// </summary>
    /// <returns></returns>
    public ContactsApi()
    {
        this.Configuration = SendPulse.Api.Client.Configuration.Default;

        ExceptionFactory = SendPulse.Api.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ContactsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public ContactsApi(SendPulse.Api.Client.Abstractions.IConfiguration configuration = null)
    {
        if (configuration == null) // use the default one in Configuration
            this.Configuration = SendPulse.Api.Client.Configuration.Default;
        else
            this.Configuration = configuration;

        ExceptionFactory = SendPulse.Api.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return this.Configuration.ApiClient.RestClient.Options!.BaseUrl.ToString();
    }

    /// <summary>
    /// Sets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    [Obsolete(
        "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead."
    )]
    public void SetBasePath(string basePath)
    {
        // do nothing
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public SendPulse.Api.Client.Abstractions.IConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public SendPulse.Api.Client.ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
                throw new InvalidOperationException(
                    "Multicast delegate for ExceptionFactory is unsupported."
                );
            }
            return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
    }

    /// <summary>
    /// Gets the default header.
    /// </summary>
    /// <returns>Dictionary of HTTP header</returns>
    [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
    public IStringDictionary DefaultHeader()
    {
        return new ReadOnlyStringDictionary(this.Configuration.DefaultHeader);
    }

    /// <summary>
    /// Add default header.
    /// </summary>
    /// <param name="key">Header field name.</param>
    /// <param name="value">Header field value.</param>
    /// <returns></returns>
    [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
    public void AddDefaultHeader(string key, string value)
    {
        this.Configuration.AddDefaultHeader(key, value);
    }

    /// <summary>
    /// Resume autoflows for a contact Resumes autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsDeletePauseAutomationPost(ContactsDeletePauseAutomationBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse =
            ContactsDeletePauseAutomationPostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Resume autoflows for a contact Resumes autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsDeletePauseAutomationPostWithHttpInfo(
        ContactsDeletePauseAutomationBody body
    )
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeletePauseAutomationPost"
            );

        var localVarPath = "/contacts/deletePauseAutomation";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory(
                "ContactsDeletePauseAutomationPost",
                localVarResponse
            );
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Resume autoflows for a contact Resumes autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsDeletePauseAutomationPostAsync(
        ContactsDeletePauseAutomationBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse =
            await ContactsDeletePauseAutomationPostAsyncWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Resume autoflows for a contact Resumes autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsDeletePauseAutomationPostAsyncWithHttpInfo(ContactsDeletePauseAutomationBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeletePauseAutomationPost"
            );

        var localVarPath = "/contacts/deletePauseAutomation";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory(
                "ContactsDeletePauseAutomationPost",
                localVarResponse
            );
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Delete contact Removes a contact from the audience and subscribers list. The contact can be added back only by subscribing to the bot.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsDeletePost(ContactsDeleteBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsDeletePostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Delete contact Removes a contact from the audience and subscribers list. The contact can be added back only by subscribing to the bot.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsDeletePostWithHttpInfo(ContactsDeleteBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeletePost"
            );

        var localVarPath = "/contacts/delete";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDeletePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Delete contact Removes a contact from the audience and subscribers list. The contact can be added back only by subscribing to the bot.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsDeletePostAsync(
        ContactsDeleteBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse = await ContactsDeletePostAsyncWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Delete contact Removes a contact from the audience and subscribers list. The contact can be added back only by subscribing to the bot.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsDeletePostAsyncWithHttpInfo(ContactsDeleteBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeletePost"
            );

        var localVarPath = "/contacts/delete";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDeletePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Remove a tag from a contact Removes the tag for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsDeleteTagPost(ContactsDeleteTagBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsDeleteTagPostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Remove a tag from a contact Removes the tag for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsDeleteTagPostWithHttpInfo(
        ContactsDeleteTagBody body
    )
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeleteTagPost"
            );

        var localVarPath = "/contacts/deleteTag";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDeleteTagPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Remove a tag from a contact Removes the tag for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsDeleteTagPostAsync(
        ContactsDeleteTagBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse =
            await ContactsDeleteTagPostAsyncWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Remove a tag from a contact Removes the tag for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsDeleteTagPostAsyncWithHttpInfo(ContactsDeleteTagBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeleteTagPost"
            );

        var localVarPath = "/contacts/deleteTag";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDeleteTagPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Delete a variable the selected contact Delete the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsDeleteVariablePost(ContactsDeleteVariableBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsDeleteVariablePostWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a variable the selected contact Delete the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsDeleteVariablePostWithHttpInfo(
        ContactsDeleteVariableBody body
    )
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeleteVariablePost"
            );

        var localVarPath = "/contacts/deleteVariable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDeleteVariablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Delete a variable the selected contact Delete the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsDeleteVariablePostAsync(
        ContactsDeleteVariableBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse =
            await ContactsDeleteVariablePostAsyncWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a variable the selected contact Delete the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsDeleteVariablePostAsyncWithHttpInfo(ContactsDeleteVariableBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDeleteVariablePost"
            );

        var localVarPath = "/contacts/deleteVariable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDeleteVariablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Disable contact Disables a contact in your audience list. Campaigns and autoflows will not be sent to this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsDisablePost(ContactsDisableBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsDisablePostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Disable contact Disables a contact in your audience list. Campaigns and autoflows will not be sent to this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsDisablePostWithHttpInfo(ContactsDisableBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDisablePost"
            );

        var localVarPath = "/contacts/disable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDisablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Disable contact Disables a contact in your audience list. Campaigns and autoflows will not be sent to this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsDisablePostAsync(
        ContactsDisableBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse = await ContactsDisablePostAsyncWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Disable contact Disables a contact in your audience list. Campaigns and autoflows will not be sent to this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsDisablePostAsyncWithHttpInfo(ContactsDisableBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsDisablePost"
            );

        var localVarPath = "/contacts/disable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsDisablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Enable contact Enables a contact in the audience list and contact start receiving campaings and autoflows
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsEnablePost(ContactsEnableBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsEnablePostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Enable contact Enables a contact in the audience list and contact start receiving campaings and autoflows
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsEnablePostWithHttpInfo(ContactsEnableBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsEnablePost"
            );

        var localVarPath = "/contacts/enable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsEnablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Enable contact Enables a contact in the audience list and contact start receiving campaings and autoflows
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsEnablePostAsync(
        ContactsEnableBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse = await ContactsEnablePostAsyncWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Enable contact Enables a contact in the audience list and contact start receiving campaings and autoflows
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsEnablePostAsyncWithHttpInfo(ContactsEnableBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsEnablePost"
            );

        var localVarPath = "/contacts/enable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsEnablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Get a list of contacts by tag Returns a list of contacts by tag for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tag">Created contact’s tag to search by</param>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>InlineResponse2001</returns>
    public ContactsReceived ContactsGetByTagGet(string tag, string botId)
    {
        ApiResponse<ContactsReceived> localVarResponse = ContactsGetByTagGetWithHttpInfo(
            tag,
            botId
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of contacts by tag Returns a list of contacts by tag for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tag">Created contact’s tag to search by</param>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>ApiResponse of InlineResponse2001</returns>
    public ApiResponse<ContactsReceived> ContactsGetByTagGetWithHttpInfo(string tag, string botId)
    {
        // verify the required parameter 'tag' is set
        if (tag == null)
            throw new ApiException(
                400,
                "Missing required parameter 'tag' when calling ContactsApi->ContactsGetByTagGet"
            );
        // verify the required parameter 'botId' is set
        if (botId == null)
            throw new ApiException(
                400,
                "Missing required parameter 'botId' when calling ContactsApi->ContactsGetByTagGet"
            );

        var localVarPath = "/contacts/getByTag";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (tag != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)
            ); // query parameter
        if (botId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bot_id", botId)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsGetByTagGet", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<ContactsReceived>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (ContactsReceived)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsReceived))
        );
    }

    /// <summary>
    /// Get a list of contacts by tag Returns a list of contacts by tag for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tag">Created contact’s tag to search by</param>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of InlineResponse2001</returns>
    public async System.Threading.Tasks.Task<ContactsReceived> ContactsGetByTagGetAsync(
        string tag,
        string botId
    )
    {
        ApiResponse<ContactsReceived> localVarResponse = await ContactsGetByTagGetAsyncWithHttpInfo(
            tag,
            botId
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of contacts by tag Returns a list of contacts by tag for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="tag">Created contact’s tag to search by</param>
    /// <param name="botId">Bot ID. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<ContactsReceived>
    > ContactsGetByTagGetAsyncWithHttpInfo(string tag, string botId)
    {
        // verify the required parameter 'tag' is set
        if (tag == null)
            throw new ApiException(
                400,
                "Missing required parameter 'tag' when calling ContactsApi->ContactsGetByTagGet"
            );
        // verify the required parameter 'botId' is set
        if (botId == null)
            throw new ApiException(
                400,
                "Missing required parameter 'botId' when calling ContactsApi->ContactsGetByTagGet"
            );

        var localVarPath = "/contacts/getByTag";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (tag != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)
            ); // query parameter
        if (botId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bot_id", botId)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsGetByTagGet", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<ContactsReceived>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (ContactsReceived)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsReceived))
        );
    }

    /// <summary>
    /// Get contacts by variable Returns contacts by variable identifier or variable name for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="variableValue">Contact&#x27;s variable value</param>
    /// <param name="variableId">Contact’s variable ID to search by; required parameter if you do not pass variable_name and bot_id. (optional)</param>
    /// <param name="variableName">Contact’s variable name to search by; required parameter and passed with the bot_id parameter, if you do not pass variable_id. (optional)</param>
    /// <param name="botId">Bot ID; required parameter and passed with the variable_name parameter, if you do not pass variable_id. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact. (optional)</param>
    /// <returns>InlineResponse2001</returns>
    public ContactsReceived ContactsGetByVariableGet(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    )
    {
        ApiResponse<ContactsReceived> localVarResponse = ContactsGetByVariableGetWithHttpInfo(
            variableValue,
            variableId,
            variableName,
            botId
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get contacts by variable Returns contacts by variable identifier or variable name for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="variableValue">Contact&#x27;s variable value</param>
    /// <param name="variableId">Contact’s variable ID to search by; required parameter if you do not pass variable_name and bot_id. (optional)</param>
    /// <param name="variableName">Contact’s variable name to search by; required parameter and passed with the bot_id parameter, if you do not pass variable_id. (optional)</param>
    /// <param name="botId">Bot ID; required parameter and passed with the variable_name parameter, if you do not pass variable_id. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact. (optional)</param>
    /// <returns>ApiResponse of InlineResponse2001</returns>
    public ApiResponse<ContactsReceived> ContactsGetByVariableGetWithHttpInfo(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    )
    {
        // verify the required parameter 'variableValue' is set
        if (variableValue == null)
            throw new ApiException(
                400,
                "Missing required parameter 'variableValue' when calling ContactsApi->ContactsGetByVariableGet"
            );

        var localVarPath = "/contacts/getByVariable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (variableId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_id", variableId)
            ); // query parameter
        if (variableName != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(
                    "",
                    "variable_name",
                    variableName
                )
            ); // query parameter
        if (botId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bot_id", botId)
            ); // query parameter
        if (variableValue != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(
                    "",
                    "variable_value",
                    variableValue
                )
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsGetByVariableGet", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<ContactsReceived>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (ContactsReceived)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsReceived))
        );
    }

    /// <summary>
    /// Get contacts by variable Returns contacts by variable identifier or variable name for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="variableValue">Contact&#x27;s variable value</param>
    /// <param name="variableId">Contact’s variable ID to search by; required parameter if you do not pass variable_name and bot_id. (optional)</param>
    /// <param name="variableName">Contact’s variable name to search by; required parameter and passed with the bot_id parameter, if you do not pass variable_id. (optional)</param>
    /// <param name="botId">Bot ID; required parameter and passed with the variable_name parameter, if you do not pass variable_id. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact. (optional)</param>
    /// <returns>Task of InlineResponse2001</returns>
    public async System.Threading.Tasks.Task<ContactsReceived> ContactsGetByVariableGetAsync(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    )
    {
        ApiResponse<ContactsReceived> localVarResponse =
            await ContactsGetByVariableGetAsyncWithHttpInfo(
                variableValue,
                variableId,
                variableName,
                botId
            );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get contacts by variable Returns contacts by variable identifier or variable name for the specified bot
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="variableValue">Contact&#x27;s variable value</param>
    /// <param name="variableId">Contact’s variable ID to search by; required parameter if you do not pass variable_name and bot_id. (optional)</param>
    /// <param name="variableName">Contact’s variable name to search by; required parameter and passed with the bot_id parameter, if you do not pass variable_id. (optional)</param>
    /// <param name="botId">Bot ID; required parameter and passed with the variable_name parameter, if you do not pass variable_id. Can be obtained with a method of getting a list of bots. You can also find it in your account in the address bar of a chat window with the desired contact. (optional)</param>
    /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<ContactsReceived>
    > ContactsGetByVariableGetAsyncWithHttpInfo(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    )
    {
        // verify the required parameter 'variableValue' is set
        if (variableValue == null)
            throw new ApiException(
                400,
                "Missing required parameter 'variableValue' when calling ContactsApi->ContactsGetByVariableGet"
            );

        var localVarPath = "/contacts/getByVariable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (variableId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_id", variableId)
            ); // query parameter
        if (variableName != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(
                    "",
                    "variable_name",
                    variableName
                )
            ); // query parameter
        if (botId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bot_id", botId)
            ); // query parameter
        if (variableValue != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(
                    "",
                    "variable_value",
                    variableValue
                )
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsGetByVariableGet", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<ContactsReceived>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (ContactsReceived)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsReceived))
        );
    }

    /// <summary>
    /// Get contact info via a contact ID Returns information on the selected contact: bot and contact ID, information from messenger, list of tags and variables, activity data and date added
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>InlineResponse200</returns>
    public ContactReceived ContactsGetGet(string id)
    {
        ApiResponse<ContactReceived> localVarResponse = ContactsGetGetWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get contact info via a contact ID Returns information on the selected contact: bot and contact ID, information from messenger, list of tags and variables, activity data and date added
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>ApiResponse of InlineResponse200</returns>
    public ApiResponse<ContactReceived> ContactsGetGetWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(
                400,
                "Missing required parameter 'id' when calling ContactsApi->ContactsGetGet"
            );

        var localVarPath = "/contacts/get";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (id != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsGetGet", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<ContactReceived>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (ContactReceived)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactReceived))
        );
    }

    /// <summary>
    /// Get contact info via a contact ID Returns information on the selected contact: bot and contact ID, information from messenger, list of tags and variables, activity data and date added
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of InlineResponse200</returns>
    public async System.Threading.Tasks.Task<ContactReceived> ContactsGetGetAsync(string id)
    {
        ApiResponse<ContactReceived> localVarResponse = await ContactsGetGetAsyncWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get contact info via a contact ID Returns information on the selected contact: bot and contact ID, information from messenger, list of tags and variables, activity data and date added
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of ApiResponse (InlineResponse200)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<ContactReceived>
    > ContactsGetGetAsyncWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(
                400,
                "Missing required parameter 'id' when calling ContactsApi->ContactsGetGet"
            );

        var localVarPath = "/contacts/get";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (id != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsGetGet", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<ContactReceived>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (ContactReceived)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactReceived))
        );
    }

    /// <summary>
    /// Get remaining time for automation pause Returns the time remaining until autoflows are stopped for this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsGetPauseAutomationGet(string contactId)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsGetPauseAutomationGetWithHttpInfo(
            contactId
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get remaining time for automation pause Returns the time remaining until autoflows are stopped for this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsGetPauseAutomationGetWithHttpInfo(string contactId)
    {
        // verify the required parameter 'contactId' is set
        if (contactId == null)
            throw new ApiException(
                400,
                "Missing required parameter 'contactId' when calling ContactsApi->ContactsGetPauseAutomationGet"
            );

        var localVarPath = "/contacts/getPauseAutomation";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (contactId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory(
                "ContactsGetPauseAutomationGet",
                localVarResponse
            );
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Get remaining time for automation pause Returns the time remaining until autoflows are stopped for this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsGetPauseAutomationGetAsync(
        string contactId
    )
    {
        ApiResponse<SuccessResponse> localVarResponse =
            await ContactsGetPauseAutomationGetAsyncWithHttpInfo(contactId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get remaining time for automation pause Returns the time remaining until autoflows are stopped for this contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact ID. Can be obtained with a contact search by tag or variable. You can also find it in your account in the address bar of a chat window with the desired contact.</param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsGetPauseAutomationGetAsyncWithHttpInfo(string contactId)
    {
        // verify the required parameter 'contactId' is set
        if (contactId == null)
            throw new ApiException(
                400,
                "Missing required parameter 'contactId' when calling ContactsApi->ContactsGetPauseAutomationGet"
            );

        var localVarPath = "/contacts/getPauseAutomation";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (contactId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Get,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory(
                "ContactsGetPauseAutomationGet",
                localVarResponse
            );
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Mark messages as read Mark contact all messages as read (set unread count 0)
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact’s ID for set unread count as 0 (optional)</param>
    /// <returns>InlineResponse2002</returns>
    public MarkReadResult ContactsMarkReadPut(string contactId = null)
    {
        ApiResponse<MarkReadResult> localVarResponse = ContactsMarkReadPutWithHttpInfo(contactId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Mark messages as read Mark contact all messages as read (set unread count 0)
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact’s ID for set unread count as 0 (optional)</param>
    /// <returns>ApiResponse of InlineResponse2002</returns>
    public ApiResponse<MarkReadResult> ContactsMarkReadPutWithHttpInfo(string contactId = null)
    {
        var localVarPath = "/contacts/mark-read";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (contactId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Put,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsMarkReadPut", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<MarkReadResult>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (MarkReadResult)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkReadResult))
        );
    }

    /// <summary>
    /// Mark messages as read Mark contact all messages as read (set unread count 0)
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact’s ID for set unread count as 0 (optional)</param>
    /// <returns>Task of InlineResponse2002</returns>
    public async System.Threading.Tasks.Task<MarkReadResult> ContactsMarkReadPutAsync(
        string contactId = null
    )
    {
        ApiResponse<MarkReadResult> localVarResponse = await ContactsMarkReadPutAsyncWithHttpInfo(
            contactId
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Mark messages as read Mark contact all messages as read (set unread count 0)
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="contactId">Contact’s ID for set unread count as 0 (optional)</param>
    /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<MarkReadResult>
    > ContactsMarkReadPutAsyncWithHttpInfo(string contactId = null)
    {
        var localVarPath = "/contacts/mark-read";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (contactId != null)
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact_id", contactId)
            ); // query parameter
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Put,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsMarkReadPut", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<MarkReadResult>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (MarkReadResult)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarkReadResult))
        );
    }

    /// <summary>
    /// Send a message to a contact Sends a text message, image, or a file  to contact with the specified contact ID.  To view an example of the request body, select a message type from the drop-down list
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsSendPost(ContactsSendBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsSendPostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Send a message to a contact Sends a text message, image, or a file  to contact with the specified contact ID.  To view an example of the request body, select a message type from the drop-down list
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsSendPostWithHttpInfo(ContactsSendBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSendPost"
            );

        var localVarPath = "/contacts/send";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSendPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Send a message to a contact Sends a text message, image, or a file  to contact with the specified contact ID.  To view an example of the request body, select a message type from the drop-down list
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsSendPostAsync(
        ContactsSendBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse = await ContactsSendPostAsyncWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Send a message to a contact Sends a text message, image, or a file  to contact with the specified contact ID.  To view an example of the request body, select a message type from the drop-down list
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsSendPostAsyncWithHttpInfo(ContactsSendBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSendPost"
            );

        var localVarPath = "/contacts/send";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSendPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Sends a text message to the specified contact Sends a text message to the specified contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsSendTextPost(ContactsSendTextBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsSendTextPostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Sends a text message to the specified contact Sends a text message to the specified contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsSendTextPostWithHttpInfo(ContactsSendTextBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSendTextPost"
            );

        var localVarPath = "/contacts/sendText";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSendTextPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Sends a text message to the specified contact Sends a text message to the specified contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsSendTextPostAsync(
        ContactsSendTextBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse = await ContactsSendTextPostAsyncWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Sends a text message to the specified contact Sends a text message to the specified contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsSendTextPostAsyncWithHttpInfo(ContactsSendTextBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSendTextPost"
            );

        var localVarPath = "/contacts/sendText";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSendTextPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Pause autoflows for a contact Pauses autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsSetPauseAutomationPost(ContactsSetPauseAutomationBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsSetPauseAutomationPostWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Pause autoflows for a contact Pauses autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsSetPauseAutomationPostWithHttpInfo(
        ContactsSetPauseAutomationBody body
    )
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSetPauseAutomationPost"
            );

        var localVarPath = "/contacts/setPauseAutomation";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory(
                "ContactsSetPauseAutomationPost",
                localVarResponse
            );
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Pause autoflows for a contact Pauses autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsSetPauseAutomationPostAsync(
        ContactsSetPauseAutomationBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse =
            await ContactsSetPauseAutomationPostAsyncWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Pause autoflows for a contact Pauses autoflows for the specified contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsSetPauseAutomationPostAsyncWithHttpInfo(ContactsSetPauseAutomationBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSetPauseAutomationPost"
            );

        var localVarPath = "/contacts/setPauseAutomation";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory(
                "ContactsSetPauseAutomationPost",
                localVarResponse
            );
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Assign a tag to contact Assigns tags to the selected contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsSetTagPost(ContactsSetTagBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsSetTagPostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Assign a tag to contact Assigns tags to the selected contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsSetTagPostWithHttpInfo(ContactsSetTagBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSetTagPost"
            );

        var localVarPath = "/contacts/setTag";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSetTagPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Assign a tag to contact Assigns tags to the selected contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Tas <summary>
    ///
    /// </summary>
    /// <param name="body"></param>
    /// <returns>The success response</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsSetTagPostAsync(
        ContactsSetTagBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse = await ContactsSetTagPostAsyncWithHttpInfo(
            body
        );
        return localVarResponse.Data;
    }

    /// <summary>
    /// Assign a tag to contact Assigns tags to the selected contact
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body"></param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsSetTagPostAsyncWithHttpInfo(ContactsSetTagBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSetTagPost"
            );

        var localVarPath = "/contacts/setTag";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSetTagPost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Assign a variable to contact Adds or updates the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>SuccessResponse</returns>
    public SuccessResponse ContactsSetVariablePost(ContactsSetVariableBody body)
    {
        ApiResponse<SuccessResponse> localVarResponse = ContactsSetVariablePostWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Assign a variable to contact Adds or updates the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>ApiResponse of SuccessResponse</returns>
    public ApiResponse<SuccessResponse> ContactsSetVariablePostWithHttpInfo(
        ContactsSetVariableBody body
    )
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSetVariablePost"
            );

        var localVarPath = "/contacts/setVariable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            this.Configuration.ApiClient.CallApi(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSetVariablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }

    /// <summary>
    /// Assign a variable to contact Adds or updates the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>Task of SuccessResponse</returns>
    public async System.Threading.Tasks.Task<SuccessResponse> ContactsSetVariablePostAsync(
        ContactsSetVariableBody body
    )
    {
        ApiResponse<SuccessResponse> localVarResponse =
            await ContactsSetVariablePostAsyncWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Assign a variable to contact Adds or updates the value of a variable for the selected contact.
    /// </summary>
    /// <exception cref="SendPulse.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">Choose one of available request body</param>
    /// <returns>Task of ApiResponse (SuccessResponse)</returns>
    public async System.Threading.Tasks.Task<
        ApiResponse<SuccessResponse>
    > ContactsSetVariablePostAsyncWithHttpInfo(ContactsSetVariableBody body)
    {
        // verify the required parameter 'body' is set
        if (body == null)
            throw new ApiException(
                400,
                "Missing required parameter 'body' when calling ContactsApi->ContactsSetVariablePost"
            );

        var localVarPath = "/contacts/setVariable";
        var localVarPathParams = new StringDictionary();
        var localVarQueryParams = new List<KeyValuePair<string, string>>();
        var localVarHeaderParams = new StringDictionary(this.Configuration.DefaultHeader);
        var localVarFormParams = new StringDictionary();
        var localVarFileParams = new Dictionary<string, FileParameter>();
        object localVarPostBody = null;

        // to determine the Content-Type header
        string[] localVarHttpContentTypes = new string[] { "application/json" };
        string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(
            localVarHttpContentTypes
        );

        // to determine the Accept header
        string[] localVarHttpHeaderAccepts = new string[] { "application/json" };
        string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(
            localVarHttpHeaderAccepts
        );
        if (localVarHttpHeaderAccept != null)
            localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

        if (body != null && body.GetType() != typeof(byte[]))
        {
            localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
        }
        else
        {
            localVarPostBody = body; // byte array
        }
        // authentication (oAuth2ClientCredentials) required
        // oauth required
        if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
        {
            localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
        }

        // make the HTTP request
        RestResponse localVarResponse = (RestResponse)
            await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType
            );

        int localVarStatusCode = (int)localVarResponse.StatusCode;

        if (ExceptionFactory != null)
        {
            Exception exception = ExceptionFactory("ContactsSetVariablePost", localVarResponse);
            if (exception != null)
                throw exception;
        }

        return new ApiResponse<SuccessResponse>(
            localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
            (SuccessResponse)
                this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse))
        );
    }
}
