/*
 * SendPulseApi.cs
 *
 *   Created: 2022-12-08-02:19:19
 *   Modified: 2022-12-19-11:02:50
 *
 *   This code allows access to the SendPulse Telegram chatbot API
 *
 *   Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 *   Author: Justin Chase <justin@justinwritescode.com>
 *
 *   Copyright © 2022 Justin Chase, All Rights Reserved
 *      License: MIT (https://opensource.org/licenses/MIT)
 */

using System.Collections.ObjectModel;
using SendPulse.Api.Abstractions;
using SendPulse.Api.Client;
using SendPulse.Api.Client.Abstractions;
using SendPulse.Api.Models;

namespace SendPulse.Api;

public class SendPulseApi : ISendPulseApi
{
    public IBotsApi BotsApi { get; }
    public ICampaignsApi CampaignsApi { get; }
    public IChatsApi ChatsApi { get; }
    public IContactsApi ContactsApi { get; }
    public IFlowsApi FlowsApi { get; }
    public ITriggersApi TriggersApi { get; }
    public IVariablesApi VariablesApi { get; }
    public IConfiguration Configuration
    {
        get => BotsApi.Configuration;
        set => BotsApi.Configuration = value;
    }
    public ExceptionFactory ExceptionFactory
    {
        get => BotsApi.ExceptionFactory;
        set => BotsApi.ExceptionFactory = value;
    }
    public IAccountApi AccountApi { get; }

    public SendPulseApi(
        IBotsApi botsApi,
        ICampaignsApi campaignsApi,
        IChatsApi chatsApi,
        IContactsApi contactsApi,
        IFlowsApi flowsApi,
        ITriggersApi triggersApi,
        IVariablesApi variablesApi,
        IAccountApi accountApi
    )
    {
        BotsApi = botsApi;
        CampaignsApi = campaignsApi;
        ChatsApi = chatsApi;
        ContactsApi = contactsApi;
        FlowsApi = flowsApi;
        TriggersApi = triggersApi;
        VariablesApi = variablesApi;
        AccountApi = accountApi;
    }

    public PagedApiResponse<Collection<Bot>> BotsGet() => BotsApi.BotsGet();

    public ApiResponse<PagedApiResponse<Collection<Bot>>> BotsGetWithHttpInfo() =>
        BotsApi.BotsGetWithHttpInfo();

    public PagedApiResponse<BotStatistics> BotsStatisticsGet(string botId) =>
        BotsApi.BotsStatisticsGet(botId);

    public ApiResponse<PagedApiResponse<BotStatistics>> BotsStatisticsGetWithHttpInfo(
        string botId
    ) => BotsApi.BotsStatisticsGetWithHttpInfo(botId);

    public Task<PagedApiResponse<Collection<Bot>>> BotsGetAsync() => BotsApi.BotsGetAsync();

    public Task<ApiResponse<PagedApiResponse<Collection<Bot>>>> BotsGetAsyncWithHttpInfo() =>
        BotsApi.BotsGetAsyncWithHttpInfo();

    public Task<PagedApiResponse<BotStatistics>> BotsStatisticsGetAsync(string botId) =>
        BotsApi.BotsStatisticsGetAsync(botId);

    public Task<ApiResponse<PagedApiResponse<BotStatistics>>> BotsStatisticsGetAsyncWithHttpInfo(
        string botId
    ) => BotsApi.BotsStatisticsGetAsyncWithHttpInfo(botId);

    public string GetBasePath() => BotsApi.GetBasePath();

    public InlineResponse20010 CampaignsSendPost(CampaignsSendBody body) =>
        CampaignsApi.CampaignsSendPost(body);

    public ApiResponse<InlineResponse20010> CampaignsSendPostWithHttpInfo(CampaignsSendBody body) =>
        CampaignsApi.CampaignsSendPostWithHttpInfo(body);

    public Task<InlineResponse20010> CampaignsSendPostAsync(CampaignsSendBody body) =>
        CampaignsApi.CampaignsSendPostAsync(body);

    public Task<ApiResponse<InlineResponse20010>> CampaignsSendPostAsyncWithHttpInfo(
        CampaignsSendBody body
    ) => CampaignsApi.CampaignsSendPostAsyncWithHttpInfo(body);

    public GetBotsChatsByBotIdResponse GetBotsChatsByBotId(string botId) =>
        ChatsApi.GetBotsChatsByBotId(botId);

    public ApiResponse<GetBotsChatsByBotIdResponse> ChatsGetWithHttpInfo(string botId) =>
        ChatsApi.ChatsGetWithHttpInfo(botId);

    public PagedMessagesResponse ChatsMessagesGet(string contactId) =>
        ChatsApi.ChatsMessagesGet(contactId);

    public ApiResponse<PagedMessagesResponse> ChatsMessagesGetWithHttpInfo(string contactId) =>
        ChatsApi.ChatsMessagesGetWithHttpInfo(contactId);

    public Task<GetBotsChatsByBotIdResponse> ChatsGetAsync(string botId) =>
        ChatsApi.ChatsGetAsync(botId);

    public Task<ApiResponse<GetBotsChatsByBotIdResponse>> ChatsGetAsyncWithHttpInfo(string botId) =>
        ChatsApi.ChatsGetAsyncWithHttpInfo(botId);

    public Task<PagedMessagesResponse> ChatsMessagesGetAsync(string contactId) =>
        ChatsApi.ChatsMessagesGetAsync(contactId);

    public Task<ApiResponse<PagedMessagesResponse>> ChatsMessagesGetAsyncWithHttpInfo(
        string contactId
    ) => ChatsApi.ChatsMessagesGetAsyncWithHttpInfo(contactId);

    public SuccessResponse ContactsDeletePauseAutomationPost(
        ContactsDeletePauseAutomationBody body
    ) => ContactsApi.ContactsDeletePauseAutomationPost(body);

    public ApiResponse<SuccessResponse> ContactsDeletePauseAutomationPostWithHttpInfo(
        ContactsDeletePauseAutomationBody body
    ) => ContactsApi.ContactsDeletePauseAutomationPostWithHttpInfo(body);

    public SuccessResponse ContactsDeletePost(ContactsDeleteBody body) =>
        ContactsApi.ContactsDeletePost(body);

    public ApiResponse<SuccessResponse> ContactsDeletePostWithHttpInfo(ContactsDeleteBody body) =>
        ContactsApi.ContactsDeletePostWithHttpInfo(body);

    public SuccessResponse ContactsDeleteTagPost(ContactsDeleteTagBody body) =>
        ContactsApi.ContactsDeleteTagPost(body);

    public ApiResponse<SuccessResponse> ContactsDeleteTagPostWithHttpInfo(
        ContactsDeleteTagBody body
    ) => ContactsApi.ContactsDeleteTagPostWithHttpInfo(body);

    public SuccessResponse ContactsDeleteVariablePost(ContactsDeleteVariableBody body) =>
        ContactsApi.ContactsDeleteVariablePost(body);

    public ApiResponse<SuccessResponse> ContactsDeleteVariablePostWithHttpInfo(
        ContactsDeleteVariableBody body
    ) => ContactsApi.ContactsDeleteVariablePostWithHttpInfo(body);

    public SuccessResponse ContactsDisablePost(ContactsDisableBody body) =>
        ContactsApi.ContactsDisablePost(body);

    public ApiResponse<SuccessResponse> ContactsDisablePostWithHttpInfo(ContactsDisableBody body) =>
        ContactsApi.ContactsDisablePostWithHttpInfo(body);

    public SuccessResponse ContactsEnablePost(ContactsEnableBody body) =>
        ContactsApi.ContactsEnablePost(body);

    public ApiResponse<SuccessResponse> ContactsEnablePostWithHttpInfo(ContactsEnableBody body) =>
        ContactsApi.ContactsEnablePostWithHttpInfo(body);

    public ContactsReceived ContactsGetByTagGet(string tag, string botId) =>
        ContactsApi.ContactsGetByTagGet(tag, botId);

    public ApiResponse<ContactsReceived> ContactsGetByTagGetWithHttpInfo(
        string tag,
        string botId
    ) => ContactsApi.ContactsGetByTagGetWithHttpInfo(tag, botId);

    public ContactsReceived ContactsGetByVariableGet(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    ) => ContactsApi.ContactsGetByVariableGet(variableValue, variableId, variableName, botId);

    public ApiResponse<ContactsReceived> ContactsGetByVariableGetWithHttpInfo(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    ) =>
        ContactsApi.ContactsGetByVariableGetWithHttpInfo(
            variableValue,
            variableId,
            variableName,
            botId
        );

    public ContactReceived ContactsGetGet(string id) => ContactsApi.ContactsGetGet(id);

    public ApiResponse<ContactReceived> ContactsGetGetWithHttpInfo(string id) =>
        ContactsApi.ContactsGetGetWithHttpInfo(id);

    public SuccessResponse ContactsGetPauseAutomationGet(string contactId) =>
        ContactsApi.ContactsGetPauseAutomationGet(contactId);

    public ApiResponse<SuccessResponse> ContactsGetPauseAutomationGetWithHttpInfo(
        string contactId
    ) => ContactsApi.ContactsGetPauseAutomationGetWithHttpInfo(contactId);

    public MarkReadResult ContactsMarkReadPut(string contactId = null) =>
        ContactsApi.ContactsMarkReadPut(contactId);

    public ApiResponse<MarkReadResult> ContactsMarkReadPutWithHttpInfo(string contactId = null) =>
        ContactsApi.ContactsMarkReadPutWithHttpInfo(contactId);

    public SuccessResponse ContactsSendPost(ContactsSendBody body) =>
        ContactsApi.ContactsSendPost(body);

    public ApiResponse<SuccessResponse> ContactsSendPostWithHttpInfo(ContactsSendBody body) =>
        ContactsApi.ContactsSendPostWithHttpInfo(body);

    public SuccessResponse ContactsSendTextPost(ContactsSendTextBody body) =>
        ContactsApi.ContactsSendTextPost(body);

    public ApiResponse<SuccessResponse> ContactsSendTextPostWithHttpInfo(
        ContactsSendTextBody body
    ) => ContactsApi.ContactsSendTextPostWithHttpInfo(body);

    public SuccessResponse ContactsSetPauseAutomationPost(ContactsSetPauseAutomationBody body) =>
        ContactsApi.ContactsSetPauseAutomationPost(body);

    public ApiResponse<SuccessResponse> ContactsSetPauseAutomationPostWithHttpInfo(
        ContactsSetPauseAutomationBody body
    ) => ContactsApi.ContactsSetPauseAutomationPostWithHttpInfo(body);

    public SuccessResponse ContactsSetTagPost(ContactsSetTagBody body) =>
        ContactsApi.ContactsSetTagPost(body);

    public ApiResponse<SuccessResponse> ContactsSetTagPostWithHttpInfo(ContactsSetTagBody body) =>
        ContactsApi.ContactsSetTagPostWithHttpInfo(body);

    public SuccessResponse ContactsSetVariablePost(ContactsSetVariableBody body) =>
        ContactsApi.ContactsSetVariablePost(body);

    public ApiResponse<SuccessResponse> ContactsSetVariablePostWithHttpInfo(
        ContactsSetVariableBody body
    ) => ContactsApi.ContactsSetVariablePostWithHttpInfo(body);

    public Task<SuccessResponse> ContactsDeletePauseAutomationPostAsync(
        ContactsDeletePauseAutomationBody body
    ) => ContactsApi.ContactsDeletePauseAutomationPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsDeletePauseAutomationPostAsyncWithHttpInfo(
        ContactsDeletePauseAutomationBody body
    ) => ContactsApi.ContactsDeletePauseAutomationPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsDeletePostAsync(ContactsDeleteBody body) =>
        ContactsApi.ContactsDeletePostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsDeletePostAsyncWithHttpInfo(
        ContactsDeleteBody body
    ) => ContactsApi.ContactsDeletePostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsDeleteTagPostAsync(ContactsDeleteTagBody body) =>
        ContactsApi.ContactsDeleteTagPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsDeleteTagPostAsyncWithHttpInfo(
        ContactsDeleteTagBody body
    ) => ContactsApi.ContactsDeleteTagPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsDeleteVariablePostAsync(ContactsDeleteVariableBody body) =>
        ContactsApi.ContactsDeleteVariablePostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsDeleteVariablePostAsyncWithHttpInfo(
        ContactsDeleteVariableBody body
    ) => ContactsApi.ContactsDeleteVariablePostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsDisablePostAsync(ContactsDisableBody body) =>
        ContactsApi.ContactsDisablePostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsDisablePostAsyncWithHttpInfo(
        ContactsDisableBody body
    ) => ContactsApi.ContactsDisablePostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsEnablePostAsync(ContactsEnableBody body) =>
        ContactsApi.ContactsEnablePostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsEnablePostAsyncWithHttpInfo(
        ContactsEnableBody body
    ) => ContactsApi.ContactsEnablePostAsyncWithHttpInfo(body);

    public Task<ContactsReceived> ContactsGetByTagGetAsync(string tag, string botId) =>
        ContactsApi.ContactsGetByTagGetAsync(tag, botId);

    public Task<ApiResponse<ContactsReceived>> ContactsGetByTagGetAsyncWithHttpInfo(
        string tag,
        string botId
    ) => ContactsApi.ContactsGetByTagGetAsyncWithHttpInfo(tag, botId);

    public Task<ContactsReceived> ContactsGetByVariableGetAsync(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    ) => ContactsApi.ContactsGetByVariableGetAsync(variableValue, variableId, variableName, botId);

    public Task<ApiResponse<ContactsReceived>> ContactsGetByVariableGetAsyncWithHttpInfo(
        string variableValue,
        string variableId = null,
        string variableName = null,
        string botId = null
    ) =>
        ContactsApi.ContactsGetByVariableGetAsyncWithHttpInfo(
            variableValue,
            variableId,
            variableName,
            botId
        );

    public Task<ContactReceived> ContactsGetGetAsync(string id) =>
        ContactsApi.ContactsGetGetAsync(id);

    public Task<ApiResponse<ContactReceived>> ContactsGetGetAsyncWithHttpInfo(string id) =>
        ContactsApi.ContactsGetGetAsyncWithHttpInfo(id);

    public Task<SuccessResponse> ContactsGetPauseAutomationGetAsync(string contactId) =>
        ContactsApi.ContactsGetPauseAutomationGetAsync(contactId);

    public Task<ApiResponse<SuccessResponse>> ContactsGetPauseAutomationGetAsyncWithHttpInfo(
        string contactId
    ) => ContactsApi.ContactsGetPauseAutomationGetAsyncWithHttpInfo(contactId);

    public Task<MarkReadResult> ContactsMarkReadPutAsync(string contactId = null) =>
        ContactsApi.ContactsMarkReadPutAsync(contactId);

    public Task<ApiResponse<MarkReadResult>> ContactsMarkReadPutAsyncWithHttpInfo(
        string contactId = null
    ) => ContactsApi.ContactsMarkReadPutAsyncWithHttpInfo(contactId);

    public Task<SuccessResponse> ContactsSendPostAsync(ContactsSendBody body) =>
        ContactsApi.ContactsSendPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsSendPostAsyncWithHttpInfo(
        ContactsSendBody body
    ) => ContactsApi.ContactsSendPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsSendTextPostAsync(ContactsSendTextBody body) =>
        ContactsApi.ContactsSendTextPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsSendTextPostAsyncWithHttpInfo(
        ContactsSendTextBody body
    ) => ContactsApi.ContactsSendTextPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsSetPauseAutomationPostAsync(
        ContactsSetPauseAutomationBody body
    ) => ContactsApi.ContactsSetPauseAutomationPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsSetPauseAutomationPostAsyncWithHttpInfo(
        ContactsSetPauseAutomationBody body
    ) => ContactsApi.ContactsSetPauseAutomationPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsSetTagPostAsync(ContactsSetTagBody body) =>
        ContactsApi.ContactsSetTagPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsSetTagPostAsyncWithHttpInfo(
        ContactsSetTagBody body
    ) => ContactsApi.ContactsSetTagPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> ContactsSetVariablePostAsync(ContactsSetVariableBody body) =>
        ContactsApi.ContactsSetVariablePostAsync(body);

    public Task<ApiResponse<SuccessResponse>> ContactsSetVariablePostAsyncWithHttpInfo(
        ContactsSetVariableBody body
    ) => ContactsApi.ContactsSetVariablePostAsyncWithHttpInfo(body);

    public GetFlowsByBotResponse GetFlowsByBot(string botId) => FlowsApi.GetFlowsByBot(botId);

    public ApiResponse<GetFlowsByBotResponse> FlowsGetWithHttpInfo(string botId) =>
        FlowsApi.FlowsGetWithHttpInfo(botId);

    public SuccessResponse FlowsRunByTriggerPost(FlowsRunByTriggerBody body) =>
        FlowsApi.FlowsRunByTriggerPost(body);

    public ApiResponse<SuccessResponse> FlowsRunByTriggerPostWithHttpInfo(
        FlowsRunByTriggerBody body
    ) => FlowsApi.FlowsRunByTriggerPostWithHttpInfo(body);

    public SuccessResponse FlowsRunPost(FlowsRunBody body) => FlowsApi.FlowsRunPost(body);

    public ApiResponse<SuccessResponse> FlowsRunPostWithHttpInfo(FlowsRunBody body) =>
        FlowsApi.FlowsRunPostWithHttpInfo(body);

    public Task<GetFlowsByBotResponse> FlowsGetAsync(string botId) => FlowsApi.FlowsGetAsync(botId);

    public Task<ApiResponse<GetFlowsByBotResponse>> FlowsGetAsyncWithHttpInfo(string botId) =>
        FlowsApi.FlowsGetAsyncWithHttpInfo(botId);

    public Task<SuccessResponse> FlowsRunByTriggerPostAsync(FlowsRunByTriggerBody body) =>
        FlowsApi.FlowsRunByTriggerPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> FlowsRunByTriggerPostAsyncWithHttpInfo(
        FlowsRunByTriggerBody body
    ) => FlowsApi.FlowsRunByTriggerPostAsyncWithHttpInfo(body);

    public Task<SuccessResponse> FlowsRunPostAsync(FlowsRunBody body) =>
        FlowsApi.FlowsRunPostAsync(body);

    public Task<ApiResponse<SuccessResponse>> FlowsRunPostAsyncWithHttpInfo(FlowsRunBody body) =>
        FlowsApi.FlowsRunPostAsyncWithHttpInfo(body);

    public InlineResponse2004 TriggersGet(string botId) => TriggersApi.TriggersGet(botId);

    public ApiResponse<InlineResponse2004> TriggersGetWithHttpInfo(string botId) =>
        TriggersApi.TriggersGetWithHttpInfo(botId);

    public Task<InlineResponse2004> TriggersGetAsync(string botId) =>
        TriggersApi.TriggersGetAsync(botId);

    public Task<ApiResponse<InlineResponse2004>> TriggersGetAsyncWithHttpInfo(string botId) =>
        TriggersApi.TriggersGetAsyncWithHttpInfo(botId);

    public InlineResponse2009 GetVariablesByBotId(string botId) =>
        VariablesApi.GetVariablesByBotId(botId);

    public ApiResponse<InlineResponse2009> VariablesGetWithHttpInfo(string botId) =>
        VariablesApi.VariablesGetWithHttpInfo(botId);

    public Task<InlineResponse2009> GetVariablesByBotIdAsync(string botId) =>
        VariablesApi.GetVariablesByBotIdAsync(botId);

    public Task<ApiResponse<InlineResponse2009>> GetVariablesByBoyIdAsyncWithHttpInfo(
        string botId
    ) => VariablesApi.GetVariablesByBoyIdAsyncWithHttpInfo(botId);

    public AccountInfo AccountGet() => AccountApi.AccountGet();

    public ApiResponse<AccountInfo> AccountGetWithHttpInfo() => AccountApi.AccountGetWithHttpInfo();

    public Task<AccountInfo> AccountGetAsync() => AccountApi.AccountGetAsync();

    public Task<ApiResponse<AccountInfo>> AccountGetAsyncWithHttpInfo() =>
        AccountApi.AccountGetAsyncWithHttpInfo();
}
