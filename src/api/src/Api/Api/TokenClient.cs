/*
 * TokenClient.cs
 *
 *   Created: 2022-12-06-01:41:44
 *   Modified: 2022-12-19-11:01:00
 *
 *   This code allows access to the SendPulse Telegram chatbot API
 *
 *   Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 *   Author: Justin Chase <justin@justinwritescode.com>
 *
 *   Copyright © 2022-2023 Justin Chase, All Rights Reserved
 *      License: MIT (https://opensource.org/licenses/MIT)
 */

using System.Net.Mime;
using RestSharp;
using SendPulse.Api.Abstractions;
using SendPulse.Api.Client;
using SendPulse.Api.Client.Abstractions;
using SendPulse.Api.Models;

namespace SendPulse.Api;

using static System.Net.Mime.MediaTypeNames;
using static System.Text.Encoding;

internal class TokenClient : IApiAccessor, ITokenClient
{
    public const string TokenUrl = "https://api.sendpulse.com/oauth/access_token";

    private ApiToken Token { get; set; } = new ApiToken { expires_in = -1 };
    private readonly Configuration _config;
    public IConfiguration Configuration { get; set; } = new Configuration { BasePath = TokenUrl };

    // IReadableConfiguration IApiAccessor.Configuration => Configuration;
    public ExceptionFactory ExceptionFactory { get; set; }

    public string GetBasePath() => Configuration.BasePath;

    public TokenClient(Configuration config) => _config = config;

    public virtual async Task<string> GetApiTokenAsync()
    {
        if (Token.IsExpired)
        {
            var client = new Configuration { BasePath = TokenUrl }.CreateApiClient();
            var tokenEndpointResponse = await client.CallApiAsync(
                path: "/",
                method: Method.Post,
                queryParams: new StringDictionary().ToList(),
                postBody: null,
                headerParams: new StringDictionary
                {
                    ["Authorization"] =
                        "Basic "
                        + System.Convert.ToBase64String(
                            UTF8.GetBytes($"{_config.ClientId}:{_config.ClientSecret}")
                        )
                },
                formParams: new StringDictionary { ["grant_type"] = "client_credentials" },
                fileParams: new Dictionary<string, FileParameter>(),
                pathParams: new StringDictionary(),
                contentType: "application/x-www-form-url-encoded",
                callTokenClient: false
            );
            Token =
                client.Deserialize(tokenEndpointResponse as RestResponse, typeof(ApiToken))
                as ApiToken;
        }

        return Configuration.AccessToken = Token.access_token;
    }
}
